// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package squidgame

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquidGameServiceClient is the client API for SquidGameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquidGameServiceClient interface {
	// Unary
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
}

type squidGameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSquidGameServiceClient(cc grpc.ClientConnInterface) SquidGameServiceClient {
	return &squidGameServiceClient{cc}
}

func (c *squidGameServiceClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, "/SquidGameService/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquidGameServiceServer is the server API for SquidGameService service.
// All implementations must embed UnimplementedSquidGameServiceServer
// for forward compatibility
type SquidGameServiceServer interface {
	// Unary
	Play(context.Context, *PlayRequest) (*PlayResponse, error)
	mustEmbedUnimplementedSquidGameServiceServer()
}

// UnimplementedSquidGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSquidGameServiceServer struct {
}

func (UnimplementedSquidGameServiceServer) Play(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedSquidGameServiceServer) mustEmbedUnimplementedSquidGameServiceServer() {}

// UnsafeSquidGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquidGameServiceServer will
// result in compilation errors.
type UnsafeSquidGameServiceServer interface {
	mustEmbedUnimplementedSquidGameServiceServer()
}

func RegisterSquidGameServiceServer(s grpc.ServiceRegistrar, srv SquidGameServiceServer) {
	s.RegisterService(&SquidGameService_ServiceDesc, srv)
}

func _SquidGameService_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquidGameServiceServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquidGameService/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquidGameServiceServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SquidGameService_ServiceDesc is the grpc.ServiceDesc for SquidGameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SquidGameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SquidGameService",
	HandlerType: (*SquidGameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _SquidGameService_Play_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "squidgame.proto",
}
